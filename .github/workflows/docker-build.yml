name: Build and Push Docker Images

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/h5-ecommerce-backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/h5-ecommerce-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js (Backend)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'h5-ecommerce-backend/package-lock.json'
        
    - name: Install backend dependencies
      run: |
        cd h5-ecommerce-backend
        npm ci
        
    - name: Run backend tests
      run: |
        cd h5-ecommerce-backend
        npm test
        
    - name: Setup Node.js (Frontend)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'h5-ecommerce-frontend/package-lock.json'
        
    - name: Install frontend dependencies
      run: |
        cd h5-ecommerce-frontend
        npm ci
        
    - name: Build frontend
      run: |
        cd h5-ecommerce-frontend
        npm run build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    strategy:
      matrix:
        service: [backend, frontend]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
        flavor: |
          latest=auto
          
    - name: Build and push backend image
      if: matrix.service == 'backend'
      uses: docker/build-push-action@v5
      with:
        context: ./h5-ecommerce-backend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push frontend image
      if: matrix.service == 'frontend'
      uses: docker/build-push-action@v5
      with:
        context: ./h5-ecommerce-frontend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      if: github.ref == 'refs/heads/main'
      run: |
        echo "ðŸš€ Deployment instructions:"
        echo "1. Pull the latest images:"
        echo "   docker pull ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:main"
        echo "   docker pull ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:main"
        echo ""
        echo "2. Update your docker-compose.yml with the new image tags"
        echo "3. Run: docker-compose up -d"