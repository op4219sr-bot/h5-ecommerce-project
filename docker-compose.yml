version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: h5-ecommerce-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-password}
      MYSQL_DATABASE: ${DB_NAME:-h5_ecommerce}
      MYSQL_USER: ${DB_USER:-h5_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./h5-ecommerce-backend/database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - h5-ecommerce-network
    command: --default-authentication-plugin=mysql_native_password

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: h5-ecommerce-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - h5-ecommerce-network
    command: redis-server --appendonly yes

  # 后端服务
  backend:
    image: ${BACKEND_IMAGE:-ghcr.io/op4219sr-bot/h5-ecommerce-project/h5-ecommerce-backend:main}
    container_name: h5-ecommerce-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      API_PREFIX: /api/v1
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ${DB_NAME:-h5_ecommerce}
      DB_USER: ${DB_USER:-h5_user}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      REDIS_DB: 0
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-here}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      UPLOAD_DIR: uploads
      MAX_FILE_SIZE: 5242880
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FILE: logs/app.log
    ports:
      - "3000:3000"
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    depends_on:
      - mysql
      - redis
    networks:
      - h5-ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端服务
  frontend:
    image: ${FRONTEND_IMAGE:-ghcr.io/op4219sr-bot/h5-ecommerce-project/h5-ecommerce-frontend:main}
    container_name: h5-ecommerce-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - h5-ecommerce-network

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: h5-ecommerce-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - h5-ecommerce-network
    profiles:
      - production

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local

networks:
  h5-ecommerce-network:
    driver: bridge